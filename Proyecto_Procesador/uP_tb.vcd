$date
	Mon Nov 16 11:31:17 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 1 ! z_flag $end
$var wire 8 " program_byte [7:0] $end
$var wire 1 # phase $end
$var wire 4 $ oprnd [3:0] $end
$var wire 4 % instr [3:0] $end
$var wire 4 & data_bus [3:0] $end
$var wire 1 ' c_flag $end
$var wire 12 ( address_RAM [11:0] $end
$var wire 4 ) accu [3:0] $end
$var wire 12 * PC [11:0] $end
$var wire 4 + FF_out [3:0] $end
$var reg 1 , clock $end
$var reg 4 - pushbuttons [3:0] $end
$var reg 1 . reset $end
$var integer 32 / nota [31:0] $end
$scope module uPmodule $end
$var wire 4 0 DATA_BUS [3:0] $end
$var wire 1 1 PHASE $end
$var wire 4 2 accu [3:0] $end
$var wire 12 3 address_RAM [11:0] $end
$var wire 1 ' c_flag $end
$var wire 1 , clock $end
$var wire 4 4 data_bus [3:0] $end
$var wire 4 5 instr [3:0] $end
$var wire 4 6 oprnd [3:0] $end
$var wire 8 7 program_byte [7:0] $end
$var wire 4 8 pushbuttons [3:0] $end
$var wire 1 . reset $end
$var wire 1 ! z_flag $end
$var wire 1 # phase $end
$var wire 1 9 Z_FLAG $end
$var wire 13 : SC [12:0] $end
$var wire 8 ; PROGRAM_BYTE [7:0] $end
$var wire 12 < PC [11:0] $end
$var wire 4 = OPRND [3:0] $end
$var wire 4 > INSTR [3:0] $end
$var wire 4 ? FF_out [3:0] $end
$var wire 7 @ DECODE_address [6:0] $end
$var wire 1 A C_FLAG $end
$var wire 4 B ALU_OUT [3:0] $end
$var wire 1 C ALUZ $end
$var wire 1 D ALUC $end
$var wire 12 E ADDRESS_ram [11:0] $end
$var wire 4 F ACCUU [3:0] $end
$scope module FASE $end
$var wire 1 , clk $end
$var wire 1 . reset $end
$var reg 1 # Y $end
$upscope $end
$scope module acumulador $end
$var wire 1 , clk $end
$var wire 1 G enable $end
$var wire 1 . reset $end
$var wire 4 H D [3:0] $end
$var reg 4 I Y [3:0] $end
$upscope $end
$scope module banderas $end
$var wire 2 J D [1:0] $end
$var wire 1 , clk $end
$var wire 1 K enable $end
$var wire 1 . reset $end
$var reg 2 L Y [1:0] $end
$upscope $end
$scope module contador $end
$var wire 12 M Bload [11:0] $end
$var wire 1 N ENABLE $end
$var wire 1 O LOAD $end
$var wire 1 , clk $end
$var wire 1 . reset $end
$var reg 12 P Y [11:0] $end
$upscope $end
$scope module deALU $end
$var wire 4 Q Y [3:0] $end
$var wire 1 R enable $end
$var wire 4 S D [3:0] $end
$upscope $end
$scope module delfetch $end
$var wire 4 T D [3:0] $end
$var wire 4 U Y [3:0] $end
$var wire 1 V enable $end
$upscope $end
$scope module dicode $end
$var wire 7 W direccion [6:0] $end
$var reg 13 X datos [12:0] $end
$upscope $end
$scope module ftch $end
$var wire 1 , clk $end
$var wire 1 1 enable $end
$var wire 1 . reset $end
$var wire 8 Y D [7:0] $end
$var reg 8 Z Y [7:0] $end
$upscope $end
$scope module memram $end
$var wire 1 , clock $end
$var wire 1 [ cs $end
$var wire 4 \ datain [3:0] $end
$var wire 12 ] direccion [11:0] $end
$var wire 1 ^ we $end
$var reg 4 _ data_out [3:0] $end
$upscope $end
$scope module opcode $end
$var wire 12 ` direccion [11:0] $end
$var wire 8 a salida [7:0] $end
$upscope $end
$scope module operaciones $end
$var wire 4 b A [3:0] $end
$var wire 4 c B [3:0] $end
$var wire 4 d Y [3:0] $end
$var wire 3 e selector [2:0] $end
$var reg 1 D C $end
$var reg 4 f RESalu [3:0] $end
$var reg 1 C ZERO $end
$var reg 5 g carry [4:0] $end
$upscope $end
$scope module pushes $end
$var wire 4 h D [3:0] $end
$var wire 4 i Y [3:0] $end
$var wire 1 j enable $end
$upscope $end
$scope module salida $end
$var wire 4 k D [3:0] $end
$var wire 1 , clk $end
$var wire 1 l enable $end
$var wire 1 . reset $end
$var reg 4 m Y [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx m
xl
bx k
xj
bx i
b110 h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
x^
bx ]
bx \
x[
bx Z
bx Y
bx X
bzxxxxxx W
xV
bx U
bx T
bx S
xR
bx Q
bx P
xO
xN
bx M
bx L
xK
bx J
bx I
bx H
xG
bx F
bx E
xD
xC
bx B
xA
bzxxxxxx @
bx ?
bx >
bx =
bx <
bx ;
bx :
x9
b110 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
z1
bx 0
b0 /
0.
b110 -
0,
bx +
bx *
bx )
bx (
x'
bx &
bx %
bx $
x#
bx "
x!
$end
#2
0l
0G
b0 e
0j
1R
0V
0^
0[
1N
0O
0K
b1000000001000 :
b1000000001000 X
09
0A
b0 $
b0 6
b0 =
b0 T
bz000000 @
bz000000 W
b0 %
b0 5
b0 >
0'
0D
b1 J
1!
1C
b0 g
b0 B
b0 H
b0 S
b0 d
b0 f
0#
b0 L
b0 Z
b0 )
b0 2
b0 F
b0 I
b0 b
b0 +
b0 ?
b0 m
b1001111 (
b1001111 3
b1001111 E
b1001111 M
b1001111 ]
b1001111 "
b1001111 7
b1001111 ;
b1001111 Y
b1001111 a
b0 *
b0 <
b0 P
b0 `
1.
#3
0.
#5
1#
b1000011 (
b1000011 3
b1000011 E
b1000011 M
b1000011 ]
b1000011 "
b1000011 7
b1000011 ;
b1000011 Y
b1000011 a
b1 *
b1 <
b1 P
b1 `
b0 &
b0 4
b0 0
b0 Q
b0 U
b0 \
b0 c
b0 i
b0 k
bz _
1,
#10
0,
#15
0#
b11000001 (
b11000001 3
b11000001 E
b11000001 M
b11000001 ]
b11000001 "
b11000001 7
b11000001 ;
b11000001 Y
b11000001 a
b10 *
b10 <
b10 P
b10 `
1,
#20
0,
#25
1#
b100011 (
b100011 3
b100011 E
b100011 M
b100011 ]
b100011 "
b100011 7
b100011 ;
b100011 Y
b100011 a
b11 *
b11 <
b11 P
b11 `
1,
#30
0,
#35
0#
b0xxxxxxxx (
b0xxxxxxxx 3
b0xxxxxxxx E
b0xxxxxxxx M
b0xxxxxxxx ]
bx "
bx 7
bx ;
bx Y
bx a
b100 *
b100 <
b100 P
b100 `
1,
#40
0,
#45
1#
b101 *
b101 <
b101 P
b101 `
1,
#50
0,
#55
0#
b110 *
b110 <
b110 P
b110 `
1,
#60
0,
#65
1#
b111 *
b111 <
b111 P
b111 `
1,
#70
0,
#75
0#
b1000 *
b1000 <
b1000 P
b1000 `
1,
#80
0,
#85
1#
b1001 *
b1001 <
b1001 P
b1001 `
1,
#90
0,
#95
0#
b1010 *
b1010 <
b1010 P
b1010 `
1,
#100
0,
#105
1#
b1011 *
b1011 <
b1011 P
b1011 `
1,
#110
0,
#115
0#
b1100 *
b1100 <
b1100 P
b1100 `
1,
#120
0,
#125
1#
b1101 *
b1101 <
b1101 P
b1101 `
1,
#130
0,
#135
0#
b1110 *
b1110 <
b1110 P
b1110 `
1,
#140
0,
#145
1#
b1111 *
b1111 <
b1111 P
b1111 `
1,
#150
0,
#155
0#
b10000 *
b10000 <
b10000 P
b10000 `
1,
#160
0,
#165
1#
b10001 *
b10001 <
b10001 P
b10001 `
1,
#170
0,
#175
0#
b10010 *
b10010 <
b10010 P
b10010 `
1,
#180
0,
#185
1#
b10011 *
b10011 <
b10011 P
b10011 `
1,
#190
0,
#195
0#
b10100 *
b10100 <
b10100 P
b10100 `
1,
#200
0,
#205
1#
b10101 *
b10101 <
b10101 P
b10101 `
1,
#210
0,
#215
0#
b10110 *
b10110 <
b10110 P
b10110 `
1,
#220
0,
#225
1#
b10111 *
b10111 <
b10111 P
b10111 `
1,
#230
0,
#235
0#
b11000 *
b11000 <
b11000 P
b11000 `
1,
#240
0,
#245
1#
b11001 *
b11001 <
b11001 P
b11001 `
1,
#250
0,
#255
0#
b11010 *
b11010 <
b11010 P
b11010 `
1,
#260
0,
#265
1#
b11011 *
b11011 <
b11011 P
b11011 `
1,
#270
0,
#275
0#
b11100 *
b11100 <
b11100 P
b11100 `
1,
#280
0,
#285
1#
b11101 *
b11101 <
b11101 P
b11101 `
1,
#290
0,
#295
0#
b11110 *
b11110 <
b11110 P
b11110 `
1,
#300
0,
#305
1#
b11111 *
b11111 <
b11111 P
b11111 `
1,
#310
0,
#315
0#
b100000 *
b100000 <
b100000 P
b100000 `
1,
#320
0,
#325
1#
b100001 *
b100001 <
b100001 P
b100001 `
1,
#330
0,
#335
0#
b100010 *
b100010 <
b100010 P
b100010 `
1,
#340
0,
#345
1#
b100011 *
b100011 <
b100011 P
b100011 `
1,
#350
0,
#355
0#
b100100 *
b100100 <
b100100 P
b100100 `
1,
#360
0,
#365
1#
b100101 *
b100101 <
b100101 P
b100101 `
1,
#370
0,
#375
0#
b100110 *
b100110 <
b100110 P
b100110 `
1,
#380
0,
#385
1#
b100111 *
b100111 <
b100111 P
b100111 `
1,
#390
0,
#395
0#
b101000 *
b101000 <
b101000 P
b101000 `
1,
#400
0,
#405
1#
b101001 *
b101001 <
b101001 P
b101001 `
1,
#410
0,
#415
0#
b101010 *
b101010 <
b101010 P
b101010 `
1,
#420
0,
#425
1#
b101011 *
b101011 <
b101011 P
b101011 `
1,
#430
0,
#435
0#
b101100 *
b101100 <
b101100 P
b101100 `
1,
#440
0,
#445
1#
b101101 *
b101101 <
b101101 P
b101101 `
1,
#450
0,
#455
0#
b101110 *
b101110 <
b101110 P
b101110 `
1,
#460
0,
#465
1#
b101111 *
b101111 <
b101111 P
b101111 `
1,
#470
0,
#475
0#
b110000 *
b110000 <
b110000 P
b110000 `
1,
#480
0,
#485
1#
b110001 *
b110001 <
b110001 P
b110001 `
1,
#490
0,
#495
0#
b110010 *
b110010 <
b110010 P
b110010 `
1,
#500
0,
